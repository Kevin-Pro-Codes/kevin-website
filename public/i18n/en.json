{

    "nav1": "Home",
    "nav2": "Portfolio",
    "nav3": "Extras",
    "nav4": "Contact",
    "st1": "About",
    "st2": "Copyright Terms",
    "st3": "Articles",
    "st4": "Images",    
    "st5": "Projects",
    "st6": "Co-op",
    "st7": "Algo Trading Bot",
    "st8": "Languages",
    "views": "This site was visited:",
    "views2": "times.",
    "feedback": "GIVE YOUR FEEDBACK OR ASK A QUESTION",
    "update": "GET INFORMED ABOUT THE LATEST UPDATES",
    "subscribe": "SUBSCRIBE",
    "send": "SEND",
    "search": "Search...",
    "comment": "Message...",
    
    "greeting": "GREETINGS",   
    "about-atext": "My name is Kevin, I was born in Switzerland in 1994 and moved to Brazil after 1 and a half years. Son of a Brazilian mother and a Portuguese father, I have relatives spread across Europe and Brazil. Moving forward, I have an interest in computer programming and also emphasize my general interest in languages. I graduated as a Radiology Technician and worked for years in my father's business, then decided to migrate to the IT field.",
    "about-title": "WHAT IS THIS SITE ABOUT?",
    "about-btext": "This site mainly focuses on projects in the field of information technology (programming), more specifically in: C, C++, Java, Web, and Android. I am pleased to present my projects and intentions. I am also interested in programming trading robots and have some languages as a hobby, things that are also part of the IT field. In my programming history, I began to understand it in intermittent periods and saw concepts like variables and conditions in Ruby from RPG Maker XP. Shortly after, I started programming some bots for the game Tibia called Elf Bot, where I handled general programming in the Lua language. Years later, I took a C language course, and that’s when more serious studies began. I read a 350-page book in a short time and scored 10/10 on the C exam. Shortly after, I started dealing with other content like C++ and created my first C++ project with over 6,000 lines of code, which ran in the IDE console. This project brought me joy because I understood that building a project requires discipline and organization. That’s when I took an in-person HTML course and then got involved with CSS and JavaScript (this site was built in HTML5, CSS3, JavaScript). Java and MySQL made things more interesting, making it surprising to deal with a purely object-oriented language. After that, I developed a passion for Web Browsers, like the one I built in the Java framework, called JavaFX. Then, realizing that the beginning of the mobile era dealt with Java, I decided to learn Kotlin, and it became one of my main focuses in programming. I have the perspective that any project being developed must follow principles, and everything done results in lessons learned. It is through this type of notion that I adapt to the posture and standards of a company. I am always open to learning the syntax of programming languages, understanding lexical and semantic parameters, and existing programming methodologies. I will mention some areas in which I want to develop skills or acquire knowledge that will enhance my capabilities in future programming. Let's start with Assembly: this programming language is at the opposite pole of more abstract languages as it is a low-level language. It is closely related to machine language, and the use of a low-level language is not just about movements we make through robotics, like microprocessors, but basic and small things that are indispensable for an operating system, like its drivers. It can also be part of how an IDE compiles a language through the low-level code it is written in. ARM Assembly and WebAssembly have a direct relationship with the low level of Android, and this is interesting. Another thing I want to get in touch with and improve is leaning toward the fundamentals of computer science because it gives the programmer the apparatus for a better programming structure. Moreover, programming challenges like 'LeetCode' are always useful for practice, for me in languages like Java or Kotlin, but the extra complexity about where a language can go through its libraries and functions should not be explored too deeply without something practical and useful. It is important to improve the NoSQL area and acquire knowledge about how a database works with certain programming languages. I also find Machine Learning interesting in programming environments that simulate autonomous cars, usually in Python and C++, such as CARLA.",

    "rights": "© 2024 Kevin. All rights reserved.",
    "rights2": "Supported by: <span class='blue-text'>Halo Algo Trading</span> <img src='/images/halo.png' alt='Icon' class='halo' width='55' height='36' style='padding-top: 4px;'> and <span class='blue-text'>Solar Corp</span><a href='#' target='_blank'><img src='/images/solaricon.png' alt='Icon' class='sun' width='55' height='48' style='padding-bottom: 5px;'></i></a>",      
    "and": "and",





"copyright-title": "COMMITMENT TERM OF NON-REPRODUCTION AND NON-DISTRIBUTION OF COPYRIGHTED CONTENT",
"copyright-text": "By this Commitment Term of Non-Reproduction and Non-Distribution of Copyrighted Content, the person identified as THE COPYRIGHT HOLDER declares that the content of the website \"www.kevinws.netlify.app\", here referred to as COPYRIGHTED CONTENT and the projects found therein, is their exclusive creation and ownership, being protected by the Copyright Law (Law No. 9.610/1998). Clause 1 - Prohibition of Reproduction and Distribution 1.1. Any form of reproduction, copy, distribution, exhibition, adaptation, transmission, or any other use of the COPYRIGHTED CONTENT is strictly prohibited without the prior express written authorization of the COPYRIGHT HOLDER (for projects or content not disclosed in open code networks such as GitHub). 1.2. This term prohibits the creation of derivative works or modifications of the COPYRIGHTED CONTENT, as well as the sharing of all or part of it in any physical, digital, or public or private platform, without authorization. Clause 2 - Prohibition of Commercial Use 2.1. Commercial use of the COPYRIGHTED CONTENT is prohibited, including but not limited to sale, rental, licensing, or any other form of economic exploitation without express authorization. 2.2. The COPYRIGHTED CONTENT may not be used in promotional, advertising, or any other form of publicity for profit. Clause 3 - Penalties for Non-Compliance 3.1. The non-compliance of any provision of this Term by third parties may lead to applicable legal measures, including judicial actions for the repair of damages and losses, as well as penalties provided in the current copyright and intellectual property legislation. 3.2. The infringer may be held civilly and criminally liable for improper use, unauthorized reproductions, or any other form of violation of the COPYRIGHT HOLDER's copyright. Clause 4 - Jurisdiction 4.1. To resolve any disputes arising from this Term, the parties elect the court of [City and State], with express waiver of any other, however privileged it may be. By being in full agreement with the terms set forth herein, the parties sign this Commitment Term of Non-Reproduction and Non-Distribution of Copyrighted Content in [number of copies] copies of equal content and form.<br> Ilhéus, Bahia 2025 <br> _____________________________________  <br> Kevin Ferreira",




"articles-title": "ANALYSIS OF PROGRAMMING PARADIGMS",
"articles-text": "This article provides information about the complexity of programming languages and algorithms. It addresses topics such as: the types of languages, their structure, whether they are low or high level, strong or weak typing, compilation and interpretation, what this represents, among others. Such topics are discussed and analyzed in a simple manner, allowing laypeople to understand the existence of aspects present in programming languages. Finally, in the conclusion, the main points discussed throughout the article are highlighted, emphasizing the importance of understanding the fundamentals of information technology for professional success in the field. Reflections are made on the future trends of programming languages and their implications for software development, among other things. Keywords: IT; algorithms; programming languages; market. The foundations of information technology are essential factors for the contextualization of a good professional in the field; they are subjects of study that strengthen the training of a capable, flexible, and insightful professional. A professional who develops algorithms can never overlook the importance of their foundational studies from the past, such as the creation of truth tables, flowcharts, programming vocabulary, syntax, lexical, and semantic rules in a programming language. It is worth remembering that problems of a certain type return in unknown forms that may seem complex but can be simple; thus, each problem takes a specific time and form for its solution through algorithms, for example. The introduction to algorithmic thinking occurs, and then the professional becomes capable of using their programming style, knowing that programming itself is something \"linguistic\" and mathematical at the same time. Such awareness makes him an explorer of vast horizons, as within a programming language there will be additional content, such as libraries and frameworks, which are nothing more than tools that add resources to some programming languages. The programmer makes robotic arms work, for example, in Arduino, or in the case of self-driving cars, like the services provided by Comma Ai and Yandex, as well as everything that permeates information and social connections, resource disclosures, and innovation; all of this involves algorithmic codes and programming. It is worth remembering that important foundations in an IT company also include its administration and its resources and tools, the management practices they adopt, the dissemination of information, as well as their internal and external communication, how and to what extent an employee is communicated with or can communicate. Another factor is that IT is part of most companies today, making software creation, resource management, communication, sharing, among other resources, crucial for their survival, maintenance, and ascension. Nowadays, in addition to hierarchies, there are qualifications such as junior, mid-level, and senior, which serve to classify the status of a programmer or project leader, making years of experience or advanced skills in programming categorize them in this way.",

"articles-title2": "CHARACTERISTICS OF ALGORITHMS",


    "articles-text2": "Algorithms have characteristics ranging from basic to more advanced, as well as their classification according to what type they are in a programming language. Among some classifications is the procedural paradigm, which involves using \"procedures\" or \"subroutines\". Functions are used followed by functions, considering the scopes and rules of control flow, variables and control structures such as (loops and conditionals). This is similar to the imperative paradigm, as it involves telling the machine exactly what should be done, so basically it expresses the logic of a computation without specifying the control flow, in other words, it is focused on describing what needs to be achieved instead of how to achieve it, thus, a programming language can be included in more than one paradigm per se. Another programming paradigm is the functional language, which occurs in the way that functions can be declared in variables, passed as arguments and returned from other functions. Another key point is the idea of \"pure functions\". A pure function depends only on its input to generate a result and given the same input, the same result is produced. With these concepts in mind, functional programming encourages programs to be written mostly as functions. It also advocates the idea that modularity and the absence of side effects make it easier to identify and separate responsibilities in the source code. Also, the declarative programming paradigm is about hiding complexity and bringing programming languages closer to human language and thought. This is the direct opposite of imperative language in the sense that the programmer does not give instructions on how the computer should perform a task, but rather what result is required. The famous object-oriented paradigm is one of the most famous today, which is about separating functionalities into entities that are coded as objects. Each entity will group together a certain set of information (properties) and actions (methods) that can be performed by the entity. OOP makes heavy use of classes, which is a way of creating new objects starting from a technical drawing that the programmer puts in. Objects that are created from classes are called instances. The great thing about OOP is that it makes the program easier to understand by clearly separating concepts and responsibilities. Another interesting topic in this subject of programming languages is their characteristics as high and low level languages. Low level languages are geared towards machine understanding. Therefore, they have a more complex syntax and do not have such intuitive commands. For example: remember the \"print\" instructions? Although they are easy for a person to assimilate, it is clear that the computer is not capable of understanding such a command. This is because machine language is made up only of sequences of 0 and 1, the so-called binary code. Therefore, low level languages have more direct instructions for the processor and are therefore closer to machine language. Therefore, to use them, it is necessary to know not only the language, but also the hardware of the device with which you will work. Among the main advantages and disadvantages of low level languages is the faster processing time than that of a high level language. In addition, the architecture of the devices is better used with this type of language. On the other hand, the person who will use this low level tool may take longer to understand and master the syntax. Not to mention that it will still be necessary to have in-depth knowledge of the machine's hardware, which requires more investment in study and training. Furthermore, since the written code is more processor-oriented, portability is also impaired, as it may not run on processors from different families. Furthermore, the main low-level language we have is Assembly. We call a high-level language a language whose syntax is geared towards human understanding. This means that this type of language is much more intuitive, abstract and easier to learn, especially for beginners in the programming field. To make this possible, high-level languages abstract concepts geared towards the machine and synthesize commands. For example: \"print\" and \"delete\" are instructions commonly used in these languages that, as the terms suggest, serve to display information on the screen or delete some data, respectively. Among the advantages and disadvantages of high-level programming languages is the great benefit and productivity that the programmer gains when using this type of language. This is because the abstraction provided by high-level languages allows you to write more code in less time, which is extremely positive when working on complex systems. Furthermore, if someone else needs to check your code, they will be able to understand more easily what was done. This way, the maintenance process is also simplified. On the other hand, high-level languages have some disadvantages. There are cases, for example, in which the performance of a program may be affected because it requires more processing time. They also usually take up more memory when compared to a low-level language. Some of the high-level languages are: Javascript, Java, C#, C++, Python, Ruby, Swift, PHP. Another thing to note is when a language is compiled or interpreted. Compiled is the type of language that is translated into machine code before execution, resulting in faster processing, thus requiring separate compilation for different platforms. The compilation process involves several steps, including lexical analysis, syntactic analysis, code optimization, and machine code generation. The result is an executable file or an object code library that can be executed by the computer's CPU. An interpreted language is a type of programming language in which the source code is executed directly by a program called an interpreter, without the need for prior compilation to machine code. The interpreter reads and executes the instructions of the source code line by line during the execution of the program. It should not be forgotten that in programming languages memory (RAM) management is relevant. Memory management is a fundamental part of software development, especially in lower-level programming languages such as C and C++, where programmers have more direct control over memory allocation and deallocation. However, even in higher-level languages such as Java, Python, and JavaScript, memory management is an important consideration, although it is often done in a more transparent way to the developer. An additional point is language typing, which is classified as: weak and strong typing. In a weakly typed language, automatic conversions between data types are often allowed and can occur implicitly. In a strongly typed language, automatic conversions between data types are restricted or disallowed, requiring that the types be compatible before performing an operation.",
  
  
"articles-title3": "RESULTS AND DISCUSSIONS",

"articles-text3": "It is important to be aware of the fact that each programming language has its function in IT, some closer to machine language and others further away, among other factors and categories as mentioned above. Although the market varies from one region to another (even considering internationally), the market shows a pattern. Thus, each programming language has its space, because in some cases the low demand for jobs can be compensated by high payments for performing the function. It is worth noting the great growth of languages ​​such as Python and Javascript. Python has become an essential tool in practically all scientific applications around the world due to its power and versatility. It is a general-purpose programming language that supports different programming paradigms. This language is widely used in scientific and specialized applications, including data science, artificial intelligence, machine learning, computer science education, computer vision and image processing, medicine, biology and even astronomy. Python is also used for web development. This is where we can start comparing its applications with JavaScript applications. Python is used for back-end development, which is the area of ​​web development responsible for creating the elements that users don't see, such as the server side of an application. While Python can be used to develop the back-end portion of a web application, JavaScript can be used to develop both the back-end and front-end portions of the application. The front-end is the part of the application that the user sees and interacts with. Whenever you view or interact with a website or web application, you are using JavaScript \"under the hood\" .Similarly, when you interact with a mobile application, you may be using JavaScript, because frameworks like React Native allow us to write applications that adapt to different platforms. JavaScript is so widely used in web development because it is a versatile language that provides the tools necessary to develop the components of a web application.",

"articles-title4": "CONCLUSION",

"articles-text4": "It is concluded that taking into account the general characteristics of programming languages ​​and their types of structure, means of compilation, and levels of abstraction, a notion of outline is added to the programmer, thus suggesting how to deal with such a language, and possibly predicting aspects of it. It should be considered that markets and employability vary from region to region, but in general everything is heading in a similar direction. It is seen that there may be some hidden trends, such as the rise of languages ​​such as Rust and C# replacing C++ and Java, respectively, since one of the factors is the current solution that such languages ​​bring to problems and also the functional operability when it comes to the use of memory that software written in such languages ​​demands. An interesting point is how linguistic and mathematical an algorithm can be at the same time. Among the lexical, syntactic, and semantic rules limited in their creation, thus making languages ​​something that expands and at the same time has a limit. The C++ language's limitless approach is conveyed through its level of abstraction, data, and structure, thus supporting software such as Photoshop, with over 10 million lines of code, among others. Programming languages ​​can be compiled or interpreted. Compiled languages ​​are translated completely into machine language before the program is executed, while interpreted languages ​​are translated line by line during the program's execution. Each programming language has its own ecosystem of tools, libraries, frameworks, and developer community. This can affect productivity, ease of learning, and the support available to programmers. In short, programming languages ​​play a crucial role in software development, providing developers with the tools they need to create a wide variety of software applications and systems. Choosing the right programming language depends on the project requirements, personal preferences, and experience of the developers.",



"coop-title": "WHAT IS COOP AND HOW TO COLLABORATE ON MY PROJECTS?",

"coop-text": "Hello, open-source enthusiast! I am pleased to invite you to collaborate on my projects on GitHub. This invitation for cooperation (or \"coop\") is an opportunity for us to develop impactful, high-quality tools and applications together in a dynamic, innovative, and collaborative environment. In the context of open-source projects, \"coop\" means working collectively, where each person contributes their skills to create, review, and improve the available solutions. The goal is for everyone — developers, designers, and other enthusiasts — to come together to turn ideas into reality, benefiting the community and gaining new experiences and knowledge. About the Projects Each project was planned with open-source principles in mind, prioritizing accessibility, innovation, and usefulness to solve real-world problems. Whether improving front-end interfaces or building complex back-end functionalities, these projects span various areas and are suitable for different skill levels and experiences. Here's what you can expect: Project Categories: web development, mobile applications, data analysis. Technology Stack: we use technologies such as Java, C++, HTML, CSS, JavaScript, and Kotlin. Objectives: create high-quality and reusable code, implement innovative features, achieve scalability, and maintain robust security. How You Can Contribute There are several ways to support the growth of these projects, and your contribution will be highly appreciated: Feature Development: Implement new features based on community feedback or roadmap items. Bug Fixing: Identify and fix bugs, improving the stability and performance of projects. Code Review: Review pull requests from other contributors, provide constructive feedback, and suggest improvements. Documentation: Improve documentation to make the project easier to understand for future contributors and users. Testing and QA: Develop unit tests, end-to-end tests, or assist with manual testing to ensure a bug-free experience. Design and UX: If you're a designer, your contribution to creating an intuitive user interface will be essential. Localization: Make the project accessible to more people by adding support for different languages. Getting Started To collaborate, follow these steps: Explore the Repositories: Visit the [GitHub repository links] and review the README and roadmap of each project. Join the Discussions: Feel free to participate in discussions by opening issues with questions, suggestions, or new ideas. Clone and Experiment: Fork the repository, clone it locally, and start exploring the code. Open Your First PR: Once you have something to contribute, open a pull request. I'll be happy to review and discuss your ideas. Contribution Guidelines Before contributing, please review the [Contribution Guidelines] and the [Code of Conduct] to understand the coding standards, documentation practices, and respectful collaboration practices we follow. Contact and Support If you have questions or need clarification, please contact me directly on GitHub or send an email to kevinprofessionalman@outlook.com. I look forward to working with you and building something amazing together! Thank you for considering this opportunity for cooperation, and I'm excited to see the incredible contributions you'll bring to these projects. Happy Coding!",

"coop-title2": "CONTRIBUTION GUIDELINES",

"coop-text2": "To ensure that we can all collaborate efficiently and respectfully, we've created these guidelines to help you get started and guide every contribution. 1. How to Contribute Fork and Clone the Repository: Fork the project, clone it locally, and explore the code. 2. Choose an Area to Contribute: Features: Develop new features based on discussions and the roadmap. Bug Fixing: Review open issues to find bugs and help fix them. Code Review: Review pull requests from other contributors, giving constructive feedback. Documentation: Document code, APIs, and features to make everything easier to understand. Testing and QA: Write automated tests and participate in manual testing to ensure stability. Design and UX: If you have design skills, help improve the user interface. Localization: Add support for different languages, making the project more accessible. 3. Follow Coding Standards: Check the README and project configuration files to align with the established code style and best practices. 4. Creating Pull Requests (PR): Create a PR with a clear description and detailed objectives of what was changed or added. Reference any related issue. Carefully review your code before submitting the PR. 5. Feedback and Discussions: Participate in discussions constructively and openly. We're always open to new ideas and improvements. Respect the Code of Conduct: Maintain a respectful and professional attitude in all interactions, both in discussions and code reviews.",

"coop-title3": "CODE OF CONDUCT",

"coop-text3": "To ensure our community is welcoming and collaborative, we ask all contributors to follow this code of conduct: Commitment to an Inclusive Environment We are committed to building an open and inclusive environment for people of all backgrounds and skill levels. 1. Expected Behavior Respect and Inclusivity: Treat everyone with respect. We do not tolerate discrimination, harassment, or abusive behavior. Constructive Collaboration: Provide feedback constructively and help other contributors learn and grow. Recognition of Efforts: Value everyone's work and ideas, regardless of experience level. 2. Unacceptable Behavior Offensive or Discriminatory Comments: Insults, discrimination, or harassment of any kind are not acceptable. Disrespecting Others' Work: Ignoring or ridiculing others' contributions is unacceptable. Malicious Contributions: Attempts to damage the project or hinder its development are not allowed. Consequences of Unacceptable Behavior Anyone who violates the code of conduct may receive a warning, temporary suspension, or permanent exclusion from our community, depending on the severity of the behavior. How to Report Violations If you observe or experience any inappropriate behavior, please contact us by sending a direct message on GitHub or an email to kevinprofessionalman@outlook.com. All reports will be handled confidentially. Thank you for helping maintain a welcoming and professional environment for everyone!",







"tbot-title": "INVESTMENT ROBOTS",
"tbot-text": "MQL5, or MetaQuotes Language 5, is a programming language specifically developed for creating automated strategies, technical indicators, scripts, and libraries in MetaTrader 5, one of the most popular trading platforms for financial market operations. Mainly used by traders, algorithm programmers, and financial analysts, MQL5 enables the creation of programs for technical analysis, trade automation, and execution of financial market operations quickly and accurately.\n\nIntegrated Functions for Technical Analysis: MQL5 has an extensive library of pre-defined functions for technical analysis, including indicators such as Moving Average, Relative Strength Index (RSI), and Bollinger Bands. This simplifies the creation of trading algorithms, saving time for programmers.\n\nEvent System: MetaTrader 5 and MQL5 operate with an event system, allowing automatic execution of actions based on certain conditions, such as opening buy or sell orders when a specific market event occurs. This is achieved through event handlers like OnTick, OnTimer, OnTrade, and others, which capture real-time market events.\n\nOrder Execution and Risk Management: MQL5 is designed to provide control over trading operations, allowing buy and sell order placement, order volume calculations, leverage management, and implementation of risk control strategies. This is essential for automated traders who require precision and control in every operation.\n\nCustom Indicators and Scripts: In addition to built-in indicators, MQL5 allows the creation of custom indicators that can be plotted directly on price charts, enabling complex analyses based on unique indicators. Scripts can also be developed to perform specific actions, such as closing all open positions with a single click.\n\nStrategy Testing and Optimization: The MetaTrader 5 platform, along with MQL5, allows the use of an integrated strategy tester, enabling backtesting of algorithms and parameter optimization. This helps evaluate the efficiency of a trading strategy before applying it in the real market, using historical data and simulated market conditions.",

"tbot2-title": "SIMILARITY WITH C++",
"tbot2-text": "MQL5 is a language heavily inspired by C++ and adopts many of its features, such as structure and syntax, making it familiar to programmers with experience in C and C++. It supports advanced data structures, object-oriented programming, and pointer manipulation, offering flexibility for developing complex algorithms. The language includes features like classes, objects, inheritance, encapsulation, and polymorphism, enabling the creation of robust and modular systems.",

"tbot3-title": "KEY FEATURES OF MQL5",
"tbot3-text": "MQL5 is a powerful and advanced programming language, ideal for developing trading algorithms on MetaTrader 5. Inspired by C++, it supports Object-Oriented Programming (OOP), allowing the creation of classes and instances, which facilitates code organization and reuse. Its extensive library of pre-defined functions for technical analysis includes indicators such as Moving Average, RSI, and Bollinger Bands, simplifying the creation of trading strategies.\n\nThe MetaTrader 5 event system enables automated actions based on specific market conditions using handlers like OnTick, OnTimer, and OnTrade, which capture real-time events. Additionally, the language provides complete control over trading operations, including order submission, volume calculations, and implementation of risk control strategies, essential for automated traders.\n\nMQL5 allows the creation of custom indicators and scripts for complex analyses or specific actions, such as closing positions with a single click. The platform's integrated strategy tester enables backtesting and parameter optimization, allowing evaluation and improvement of strategies before applying them in the real market.\n\nDespite these advantages, MQL5 has limitations. Its application is highly specific to financial trading, and its exclusivity to MetaTrader restricts portability to other platforms.\n\nWith high performance, a large support community, accessible documentation, and robust tools, MQL5 is a versatile language that meets the demands of traders and analysts seeking to explore the potential of algorithmic trading.",

"tbot4-title": "WHY MENTION MQL5 HERE?",
"tbot4-text": "Because I enjoy working on some Expert Advisors in my spare time as a hobby and side income, and I genuinely like the programming aspect itself. Consequently, I often turn some models into personal projects, making me potentially available to chat and contextualize when it comes to this topic.",

"tbot5-title": "CONCLUSION",
"tbot5-text": "In summary, MQL5 is an advanced and powerful programming language, ideal for developing trading algorithms on MetaTrader 5. Its similarity to C++ makes it easier for experienced developers to learn, while its specialized functions for technical analysis and order execution make it perfect for the financial world. With its robust resource library and support for object-oriented programming, MQL5 is a versatile choice for any trader or analyst looking to automate market operations and explore the potential of algorithmic trading.",

"tbot6-title": "Contact",
"tbot6-text": "Feel free to reach out for a casual chat about the topic: kevinprofessionalman@outlook.com",




    "lang-title": "WHAT IS MY RELATIONSHIP AND AVAILABILITY REGARDING ANY LANGUAGE?",
    "lang-text": "I have always had a passion for the English language, which I consider an extremely rich and universal tongue. English has opened doors to the world, allowing me to access an immense amount of knowledge, whether in books, movies, academic articles, or interactions with people from different cultures around the globe. It's fascinating how English connects millions of people and creates opportunities to share ideas and experiences.\n\nAdditionally, I am someone who is always open to conversations, whether to improve fluency or simply to exchange experiences. I believe that constant practice, through dialogues and immersion in the language, is essential for continuous learning. I am always willing to learn from others, whether in a casual environment or in more formal contexts. I feel that the exchange of ideas and the diversity of perspectives make conversations even more enriching.\n\nIn addition to English, I also study French, which has been a wonderful experience. French is a language full of nuances and a unique sound that fascinates me more every day. I am on a learning journey and, although I am still in the process of improvement, I am increasingly passionate about its expressions and the Francophone culture that accompanies it. I study French with the aim of further expanding my linguistic and cultural horizons.\n\nIf you are also passionate about languages or want to share your own experiences, I would be happy to chat and learn with you. The exchange of knowledge is something I deeply value, and I am sure that conversations can be a great way for all of us to grow together.\n\nIf you would like to chat about experiences or practice casually, I am open to conversations. Send me an email or drop me a message on WhatsApp.",
  
  











"title-contact": "CONTACTS"
    
 

}


